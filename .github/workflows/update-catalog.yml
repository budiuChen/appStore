name: 更新应用目录

on:
  push:
    branches: [ main, master ]
    paths:
      - 'charts/stable/**/Chart.yaml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'charts/stable/**/Chart.yaml'
  # 也可以手动触发
  workflow_dispatch:

jobs:
  update-catalog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 生成应用目录
        run: |
          # 设置输出目录
          OUTPUT_FILE="./charts/app-catalog.md"
          CHARTS_DIR="./charts/stable"
          
          # 清空或创建输出文件
          echo "# 应用目录" > $OUTPUT_FILE
          echo "" >> $OUTPUT_FILE
          echo "按照类别组织的Helm应用列表，自动生成于 $(date '+%Y-%m-%d %H:%M:%S')" >> $OUTPUT_FILE
          echo "" >> $OUTPUT_FILE
          
          # 创建临时文件存储分类和应用信息
          TEMP_DIR=$(mktemp -d)
          CATEGORIES_FILE="$TEMP_DIR/categories.txt"
          touch $CATEGORIES_FILE
          
          echo "扫描Chart.yaml文件..."
          
          # 查找所有Chart.yaml文件并提取分类信息
          for chart_file in $(find $CHARTS_DIR -name Chart.yaml); do
            # 获取应用名(目录名)
            app_name=$(basename $(dirname $chart_file))
            
            # 提取应用描述
            app_desc=$(grep "^description:" $chart_file | sed 's/description: *"\(.*\)"/\1/')
            if [ -z "$app_desc" ]; then
              app_desc=$(grep "^description:" $chart_file | sed 's/description: *\(.*\)/\1/')
            fi
            
            # 提取分类
            category=""
            cat "$chart_file" | while read line; do
              if [[ "$line" == *"budiu/app-category-zh"* ]]; then
                category=$(echo "$line" | sed 's/.*budiu\/app-category-zh: *"\(.*\)".*/\1/')
                if [ -z "$category" ]; then
                  category="其他"
                fi
                
                # 创建分类目录（如果不存在）
                mkdir -p "$TEMP_DIR/$category"
                
                # 将应用信息写入分类文件
                echo "- **[$app_name](./stable/$app_name)** - $app_desc" > "$TEMP_DIR/$category/$app_name"
                
                # 记录分类名称
                if ! grep -q "^$category$" $CATEGORIES_FILE; then
                  echo "$category" >> $CATEGORIES_FILE
                fi
                
                break
              fi
            done
            
            # 如果没有找到分类，放入"其他"
            if [ -z "$category" ]; then
              mkdir -p "$TEMP_DIR/其他"
              echo "- **[$app_name](./stable/$app_name)** - $app_desc" > "$TEMP_DIR/其他/$app_name"
              
              if ! grep -q "^其他$" $CATEGORIES_FILE; then
                echo "其他" >> $CATEGORIES_FILE
              fi
            fi
          done
          
          # 生成分类导航
          echo "## 分类目录" >> $OUTPUT_FILE
          echo "" >> $OUTPUT_FILE
          
          sort $CATEGORIES_FILE | while read category; do
            clean_category=$(echo "$category" | sed 's/ /-/g')
            echo "- [$category](#$clean_category)" >> $OUTPUT_FILE
          done
          
          echo "" >> $OUTPUT_FILE
          
          # 生成各分类下的应用列表
          sort $CATEGORIES_FILE | while read category; do
            echo "## $category" >> $OUTPUT_FILE
            echo "" >> $OUTPUT_FILE
            
            if [ -d "$TEMP_DIR/$category" ]; then
              cat "$TEMP_DIR/$category"/* >> $OUTPUT_FILE
            fi
            
            echo "" >> $OUTPUT_FILE
          done
          
          # 统计信息
          cat_count=$(cat $CATEGORIES_FILE | wc -l)
          app_count=$(find $TEMP_DIR -type f -not -path "*categories.txt" | wc -l)
          
          echo "应用目录生成完毕，共包含 $cat_count 个分类，$app_count 个应用"
          
          # 清理临时文件
          rm -rf $TEMP_DIR

      - name: 提交更新的目录文件
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add charts/app-catalog.md
          git commit -m "自动更新应用目录 [skip ci]" || echo "没有更改需要提交"
          
      - name: 推送更改
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }} 