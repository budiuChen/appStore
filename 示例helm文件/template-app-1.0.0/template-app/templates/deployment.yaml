apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "template-app.fullname" . }}
  labels:
    {{- include "template-app.labels" . | nindent 4 }}
  annotations:
    # 可以添加自定义注解，例如描述此Deployment的用途
    app.kubernetes.io/part-of: template-example
spec:
  # 副本数量：从values.yaml中获取
  replicas: {{ .Values.replicaCount }}
  # 选择器：用于选择哪些Pod属于此Deployment
  selector:
    matchLabels:
      {{- include "template-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "template-app.labels" . | nindent 8 }}
        {{- include "template-app.selectorLabels" . | nindent 8 }}
      # 网络带宽限制注解
      {{- if .Values.networkLimits.enabled }}
      annotations:
        kubernetes.io/egress-bandwidth: {{ .Values.networkLimits.egress | quote }}
        kubernetes.io/ingress-bandwidth: {{ .Values.networkLimits.ingress | quote }}
      {{- end }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          # 镜像配置：使用values.yaml中定义的镜像信息
          image: "{{ .Values.image.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # 端口配置：定义容器暴露的端口
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          # 环境变量配置：根据values.yaml中的env部分设置环境变量
          {{- if .Values.env }}
          env:
            {{- if kindIs "map" .Values.env }}
            {{- range $key, $value := .Values.env }}
            - name: {{ $value.name | quote }}
              value: {{ $value.value | quote }}
            {{- end }}
            {{- else if kindIs "array" .Values.env }}
            {{- range .Values.env }}
            - name: {{ .name | quote }}
              value: {{ .value | quote }}
            {{- end }}
            {{- end }}
          {{- end }}
          # 资源请求和限制：确保容器有足够的资源
          resources:
            limits:
              cpu: {{ .Values.resources.limits.cpu | quote }}
              memory: {{ .Values.resources.limits.memory | quote }}
            requests:
              cpu: {{ .Values.resources.requests.cpu | quote }}
              memory: {{ .Values.resources.requests.memory | quote }}
          # 卷挂载：将持久卷挂载到容器内
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            - name: data
              # 挂载路径：应用程序存储数据的路径
              # 重要：此路径必须与应用程序期望的数据存储路径一致
              mountPath: {{ .Values.persistence.path }}
          {{- end }}
      # 卷定义：声明使用的卷类型
      {{- if .Values.persistence.enabled }}
      volumes:
        - name: data
          persistentVolumeClaim:
            # 使用我们定义的PVC
            claimName: {{ include "template-app.fullname" . }}-pvc
      {{- end }} 