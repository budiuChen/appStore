name: 更新应用分类

on:
  push:
    branches: [ main, master ]
    paths:
      - 'charts/stable/**/Chart.yaml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'charts/stable/**/Chart.yaml'
  # 也可以手动触发
  workflow_dispatch:

jobs:
  update-catalog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 获取当前分支名
        id: get_branch
        run: |
          CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
          echo "current_branch=$CURRENT_BRANCH" >> $GITHUB_OUTPUT
          echo "helm_branch=helm-$CURRENT_BRANCH" >> $GITHUB_OUTPUT

      - name: 创建或切换到helm分支
        run: |
          HELM_BRANCH="${{ steps.get_branch.outputs.helm_branch }}"
          
          # 检查远程是否存在该分支
          if git ls-remote --heads origin $HELM_BRANCH | grep -q $HELM_BRANCH; then
            # 远程分支存在，切换到该分支
            git checkout $HELM_BRANCH || git checkout -b $HELM_BRANCH
            git pull origin $HELM_BRANCH
          else
            # 远程分支不存在，创建新分支
            git checkout -b $HELM_BRANCH
          fi

      - name: 生成应用分类JSON
        run: |
          # 设置输出文件
          OUTPUT_FILE="./category.json"
          CHARTS_DIR="./charts/stable"
          
          # 创建JSON结构
          echo "{" > $OUTPUT_FILE
          echo "  \"categories\": {" >> $OUTPUT_FILE
          
          # 临时目录用于分类处理
          TEMP_DIR=$(mktemp -d)
          CATEGORIES_FILE="$TEMP_DIR/categories.txt"
          touch $CATEGORIES_FILE
          
          # 查找所有Chart.yaml文件并提取分类信息
          for chart_file in $(find $CHARTS_DIR -name Chart.yaml); do
            # 获取应用名(目录名)
            app_dir=$(dirname "$chart_file")
            app_name=$(basename "$app_dir")
            
            # 提取应用描述
            app_desc=$(grep "^description:" $chart_file | sed 's/description: *"\(.*\)"/\1/')
            if [ -z "$app_desc" ]; then
              app_desc=$(grep "^description:" $chart_file | sed 's/description: *\(.*\)/\1/')
            fi
            
            # 提取版本
            app_version=$(grep "^version:" $chart_file | sed 's/version: *\(.*\)/\1/')
            
            # 提取图标
            app_icon=$(grep "^icon:" $chart_file | sed 's/icon: *\(.*\)/\1/')
            
            # 提取分类
            category=""
            while IFS= read -r line; do
              if [[ "$line" == *"budiu/app-category-zh"* ]]; then
                category=$(echo "$line" | sed 's/.*budiu\/app-category-zh: *"\(.*\)".*/\1/')
                break
              fi
            done < "$chart_file"
            
            # 如果没有分类，设为"其他"
            if [ -z "$category" ]; then
              category="其他"
            fi
            
            # 记录分类
            if ! grep -q "^$category$" $CATEGORIES_FILE; then
              echo "$category" >> $CATEGORIES_FILE
              mkdir -p "$TEMP_DIR/$category"
            fi
            
            # 将应用信息写入临时文件
            echo "{" > "$TEMP_DIR/$category/$app_name.json"
            echo "  \"name\": \"$app_name\"," >> "$TEMP_DIR/$category/$app_name.json"
            echo "  \"description\": \"$app_desc\"," >> "$TEMP_DIR/$category/$app_name.json" 
            echo "  \"version\": \"$app_version\"," >> "$TEMP_DIR/$category/$app_name.json"
            echo "  \"icon\": \"$app_icon\"," >> "$TEMP_DIR/$category/$app_name.json"
            echo "  \"path\": \"./stable/$app_name\"" >> "$TEMP_DIR/$category/$app_name.json"
            echo "}" >> "$TEMP_DIR/$category/$app_name.json"
          done
          
          # 处理所有分类添加到JSON
          first_category=true
          sort $CATEGORIES_FILE | while read category; do
            if [ "$first_category" = true ]; then
              first_category=false
            else
              echo "," >> $OUTPUT_FILE
            fi
            
            # 添加分类名
            echo "    \"$category\": [" >> $OUTPUT_FILE
            
            # 添加应用列表
            first_app=true
            for app_file in "$TEMP_DIR/$category"/*.json; do
              if [ "$first_app" = true ]; then
                first_app=false
              else
                echo "," >> $OUTPUT_FILE
              fi
              
              cat "$app_file" >> $OUTPUT_FILE
            done
            
            echo "" >> $OUTPUT_FILE
            echo "    ]" >> $OUTPUT_FILE
          done
          
          # 关闭JSON结构
          echo "  }" >> $OUTPUT_FILE
          echo "}" >> $OUTPUT_FILE
          
          # 格式化JSON（如果jq可用）
          if command -v jq &> /dev/null; then
            jq . $OUTPUT_FILE > $OUTPUT_FILE.tmp && mv $OUTPUT_FILE.tmp $OUTPUT_FILE
          fi
          
          # 清理临时文件
          rm -rf $TEMP_DIR
          
          echo "应用分类JSON生成完毕"

      - name: 提交更新的目录文件
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add category.json
          git commit -m "自动更新应用分类 [skip ci]" || echo "没有更改需要提交"
          
      - name: 推送到helm分支
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.get_branch.outputs.helm_branch }} 