name: Release Charts

on:
  workflow_run:
    workflows: ["Chart Format Check"]
    types:
      - completed
    branches:
      - '**'
  # 添加手动触发选项
  workflow_dispatch:
    inputs:
      branch:
        description: '要处理的分支名称(不包含refs/heads/前缀)'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  release:
    # 移除分支检查条件，允许所有分支运行
    if: >
      ${{ 
        (github.event_name == 'workflow_dispatch') || 
        (
          github.event_name == 'workflow_run' && 
          github.event.workflow_run.conclusion == 'success'
        ) 
      }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get branch name
        id: branch-name
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.branch }}" != "" ]]; then
            echo "BRANCH_NAME=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
            echo "手动触发模式，处理分支: ${{ github.event.inputs.branch }}"
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "BRANCH_NAME=${{ github.event.workflow_run.head_branch }}" >> $GITHUB_ENV
            echo "工作流触发模式，处理分支: ${{ github.event.workflow_run.head_branch }}"
            
            # 提取用户名前缀
            USER_PREFIX=$(echo "${{ github.event.workflow_run.head_branch }}" | cut -d'/' -f1)
            echo "BRANCH_OWNER=$USER_PREFIX" >> $GITHUB_ENV
            echo "分支所有者: $USER_PREFIX"
          else
            echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
            echo "自动触发模式，处理分支: ${GITHUB_REF#refs/heads/}"
            
            # 提取用户名前缀
            USER_PREFIX=$(echo ${GITHUB_REF#refs/heads/} | cut -d'/' -f1)
            echo "BRANCH_OWNER=$USER_PREFIX" >> $GITHUB_ENV
            echo "分支所有者: $USER_PREFIX"
          fi

      - name: Debug info
        run: |
          echo "当前事件: ${{ github.event_name }}"
          echo "当前分支: ${{ github.ref }}"
          echo "处理分支: ${{ env.BRANCH_NAME }}"
          echo "分支所有者: ${{ env.BRANCH_OWNER }}"
          echo "工作目录: $(pwd)"
          echo "仓库结构:"
          ls -la

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Debug Directory Structure
        run: |
          echo "查看仓库目录结构"
          find charts -type d | sort
          echo "----------------------------"
          ls -la charts/stable/

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0

      - name: Package Charts
        run: |
          mkdir -p .release
          # 使用递归查找所有的Chart
          find charts/stable -name Chart.yaml | while read chart_yaml; do
            chart_dir=$(dirname "$chart_yaml")
            echo "找到Chart: $chart_dir"
            helm package "$chart_dir" -d .release || echo "打包 $chart_dir 失败"
          done
          
          # 显示打包结果
          echo "打包完成的Charts:"
          ls -la .release/

      - name: Create index.yaml
        run: |
          cd .release
          helm repo index .
          echo "index.yaml内容:"
          cat index.yaml

      - name: Generate category.json
        run: |
          echo "生成分类信息 category.json..."
          
          # 创建临时目录
          TEMP_DIR=$(mktemp -d)
          CATEGORIES_FILE="$TEMP_DIR/categories.txt"
          touch $CATEGORIES_FILE
          
          # 创建JSON基本结构
          CATEGORY_JSON="{\"categories\":{},\"count\":0}"
          
          # 查找所有Chart.yaml并提取分类信息
          find charts/stable -name Chart.yaml | while read chart_file; do
            # 获取应用名(目录名)
            app_dir=$(dirname "$chart_file")
            app_name=$(basename "$app_dir")
            
            # 提取分类（budiu/app-category-zh字段）
            category=$(grep -A2 "^annotations:" "$chart_file" | grep "budiu/app-category-zh" | sed -E 's/.*budiu\/app-category-zh: *"?([^"]*)"?.*/\1/')
            
            # 如果没有找到分类，设为"其他"
            if [ -z "$category" ]; then
              category="其他"
            fi
            
            # 记录分类
            if ! grep -q "^$category$" $CATEGORIES_FILE; then
              echo "$category" >> $CATEGORIES_FILE
            fi
            
            # 提取Chart.yaml中的所有字段（除了annotations下的budiu/category-zh）
            name=$(grep "^name:" "$chart_file" | sed 's/name: *\(.*\)/\1/')
            version=$(grep "^version:" "$chart_file" | sed 's/version: *\(.*\)/\1/')
            apiVersion=$(grep "^apiVersion:" "$chart_file" | sed 's/apiVersion: *\(.*\)/\1/')
            appVersion=$(grep "^appVersion:" "$chart_file" | sed 's/appVersion: *\(.*\)/\1/' | sed 's/"//g')
            description=$(grep "^description:" "$chart_file" | sed -E 's/description: *"?([^"]*)"?.*/\1/')
            icon=$(grep "^icon:" "$chart_file" | sed 's/icon: *\(.*\)/\1/')
            
            # 获取maintainers信息（可能有多行）
            maintainers=$(awk '/^maintainers:/,/^[a-z]/' "$chart_file" | grep -v "^maintainers:" | grep -v "^[a-z]" | sed 's/^-//' | tr -d '\n')
            
            # 获取sources信息（可能有多行）
            sources=$(awk '/^sources:/,/^[a-z]/' "$chart_file" | grep -v "^sources:" | grep -v "^[a-z]" | sed 's/^-//' | tr -d '\n')
            
            # 获取keywords信息（可能有多行）
            keywords=$(awk '/^keywords:/,/^[a-z]/' "$chart_file" | grep -v "^keywords:" | grep -v "^[a-z]" | sed 's/^-//' | tr -d '\n')
            
            # 创建应用信息JSON
            mkdir -p "$TEMP_DIR/$category"
            APP_JSON=$(cat << EOF
{
  "name": "$name",
  "version": "$version",
  "apiVersion": "$apiVersion",
  "appVersion": "$appVersion",
  "description": "$description",
  "icon": "$icon",
  "maintainers": "$maintainers",
  "sources": "$sources",
  "keywords": "$keywords",
  "path": "./stable/$app_name"
}
EOF
)
            
            # 检查是否已有同名应用
            if [ -f "$TEMP_DIR/$category/$name.versions" ]; then
              # 读取已有版本列表
              VERSIONS=$(cat "$TEMP_DIR/$category/$name.versions")
              
              # 添加新版本（避免重复）
              if ! echo "$VERSIONS" | grep -q "$version"; then
                echo "$version:$app_name" >> "$TEMP_DIR/$category/$name.versions"
              fi
              
              # 保存当前版本的应用信息
              echo "$APP_JSON" > "$TEMP_DIR/$category/$name-$version.json"
            else
              # 首次发现此应用，创建版本文件
              echo "$version:$app_name" > "$TEMP_DIR/$category/$name.versions"
              
              # 保存应用信息
              echo "$APP_JSON" > "$TEMP_DIR/$category/$name.json"
            fi
          done
          
          # 统计分类数量
          CATEGORY_COUNT=$(wc -l < $CATEGORIES_FILE)
          
          # 构建完整JSON
          echo "{" > category.json
          echo "  \"categories\": {" >> category.json
          
          # 添加所有分类
          first_category=true
          cat $CATEGORIES_FILE | sort | while read category; do
            if [ "$first_category" = true ]; then
              first_category=false
            else
              echo "," >> category.json
            fi
            
            # 添加分类名
            echo "    \"$category\": [" >> category.json
            
            # 添加应用列表
            first_app=true
            if [ -d "$TEMP_DIR/$category" ]; then
              # 获取所有不含版本号的应用文件
              app_files=$(find "$TEMP_DIR/$category" -name "*.json" -not -name "*-*.json" | sort)
              
              for app_file in $app_files; do
                app_name=$(basename "$app_file" .json)
                
                # 检查是否有多个版本
                if [ -f "$TEMP_DIR/$category/$app_name.versions" ]; then
                  versions_count=$(wc -l < "$TEMP_DIR/$category/$app_name.versions")
                  
                  if [ $versions_count -gt 1 ]; then
                    # 有多个版本，提取并排序
                    versions=$(cat "$TEMP_DIR/$category/$app_name.versions" | sort -V -r)
                    
                    # 获取最新版本信息
                    latest_version=$(echo "$versions" | head -1 | cut -d':' -f1)
                    latest_dir=$(echo "$versions" | head -1 | cut -d':' -f2)
                    
                    # 读取最新版本的应用信息
                    if [ -f "$TEMP_DIR/$category/$app_name-$latest_version.json" ]; then
                      APP_JSON=$(cat "$TEMP_DIR/$category/$app_name-$latest_version.json")
                    else 
                      APP_JSON=$(cat "$app_file")
                    fi
                    
                    # 添加versions字段
                    all_versions=$(echo "$versions" | cut -d':' -f1 | tr '\n' ',' | sed 's/,$//')
                    APP_JSON=$(echo "$APP_JSON" | sed 's/}$//' | sed 's/$/,\n  "versions": ["'"$all_versions"'"]\n}/')
                  else
                    # 只有一个版本
                    APP_JSON=$(cat "$app_file")
                  fi
                else
                  # 没有版本文件，直接使用应用文件
                  APP_JSON=$(cat "$app_file")
                fi
                
                # 写入应用信息
                if [ "$first_app" = true ]; then
                  first_app=false
                else
                  echo "," >> category.json
                fi
                
                echo "$APP_JSON" >> category.json
              done
            fi
            
            echo "" >> category.json
            echo "    ]" >> category.json
          done
          
          echo "  }," >> category.json
          echo "  \"count\": $CATEGORY_COUNT" >> category.json
          echo "}" >> category.json
          
          # 尝试格式化JSON
          if command -v jq &> /dev/null; then
            jq . category.json > category.json.tmp && mv category.json.tmp category.json
          fi
          
          # 显示生成的JSON
          echo "生成的category.json内容:"
          cat category.json
          
          # 移动到发布目录
          cp category.json .release/
          
          # 清理临时文件
          rm -rf $TEMP_DIR

      - name: Deploy to user's Helm Charts branch
        run: |
          # 创建或切换到用户专属的helm分支
          TARGET_BRANCH="helm-${{ env.BRANCH_NAME }}"
          echo "目标分支: $TARGET_BRANCH"
          
          # 尝试切换到目标分支，如果不存在则创建
          git fetch origin $TARGET_BRANCH || true
          if git show-ref --verify --quiet refs/remotes/origin/$TARGET_BRANCH; then
            echo "分支 $TARGET_BRANCH 已存在，切换到该分支"
            git checkout $TARGET_BRANCH
            git pull origin $TARGET_BRANCH
            git rm -rf *.tgz index.yaml category.json || true
          else
            echo "创建新分支 $TARGET_BRANCH"
            git checkout --orphan $TARGET_BRANCH
            git rm -rf .
          fi
          
          # 复制打包好的文件
          cp -r .release/* .
          
          # 创建README文件记录所有权信息
          echo "# Helm Repository for ${{ env.BRANCH_NAME }}" > README.md
          echo "Generated from branch: ${{ env.BRANCH_NAME }}" >> README.md
          echo "Owner: ${{ env.BRANCH_OWNER }}" >> README.md
          echo "Last updated: $(date)" >> README.md
          echo "" >> README.md
          echo "## Usage" >> README.md
          echo '```bash' >> README.md
          echo "# Add this Helm repository" >> README.md
          echo "helm repo add ${{ env.BRANCH_OWNER }}-repo https://raw.githubusercontent.com/${{ github.repository }}/$TARGET_BRANCH/" >> README.md
          echo "# Update repositories" >> README.md
          echo "helm repo update" >> README.md
          echo "# List available charts" >> README.md
          echo "helm search repo ${{ env.BRANCH_OWNER }}-repo" >> README.md
          echo '```' >> README.md
          
          # 提交并推送
          git add *.tgz index.yaml category.json README.md
          git commit -m "Update Helm charts for user branch ${{ env.BRANCH_NAME }}"
          
          # 使用PAT令牌进行推送
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push -f origin $TARGET_BRANCH
          
          echo "Charts已发布到分支: $TARGET_BRANCH"
          echo "用户可使用以下URL添加应用仓库:"
          echo "https://raw.githubusercontent.com/${{ github.repository }}/$TARGET_BRANCH/"
          
          # 验证文件是否存在
          echo "尝试验证文件可访问性:"
          curl -s -o /dev/null -w "%{http_code}" https://raw.githubusercontent.com/${{ github.repository }}/$TARGET_BRANCH/index.yaml 