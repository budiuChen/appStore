# 副本数量：应用程序部署的Pod副本数
replicaCount: 1

# 镜像配置：定义容器镜像信息
image:
  # 镜像仓库地址：用于拉取镜像的仓库域名，最好是镜像加速站或者国内能访问的镜像站
  imageRegistry: "docker.io"
  # 镜像名称：不包含仓库地址和标签
  repository: template/app
  # 镜像标签：通常对应应用程序版本
  tag: "1.0.0"
  # 镜像拉取策略：必须使用IfNotPresent(如果本地有则使用本地)
  # 注意：根据安全和性能要求，只允许使用IfNotPresent策略
  # 不允许使用Always或Never策略，以避免不必要的网络流量或部署失败
  pullPolicy: IfNotPresent

# 服务配置：定义Kubernetes Service资源
service:
  # 服务类型：必须是ClusterIP
  type: ClusterIP
  # 服务端口：服务监听的端口
  port: 80

# 网络带宽限制：控制Pod的网络带宽使用
networkLimits:
  # 是否启用网络限制
  enabled: true
  # 出站带宽限制：格式必须是数字+单位(K, M, G)
  egress: "1M"
  # 入站带宽限制：格式必须是数字+单位(K, M, G)
  ingress: "1M"

# 资源限制：定义容器的资源请求和限制
resources:
  # 资源限制：容器可以使用的最大资源量
  limits:
    # CPU限制：单位可以是m(千分之一核)或直接的核心数
    cpu: 200m
    # 内存限制：单位可以是Mi(兆字节)或Gi(吉字节)
    memory: 256Mi
  # 资源请求：容器需要的最小资源量
  requests:
    # CPU请求：单位同上
    cpu: 100m
    # 内存请求：单位同上
    memory: 128Mi

# 持久化存储配置：定义数据持久化方式
persistence:
  # 是否启用持久化存储
  enabled: true
  # 数据持久化的容器内挂载路径
  path: /data/app
  # 访问模式：ReadWriteOnce(单节点读写), ReadOnlyMany(多节点只读), ReadWriteMany(多节点读写)
  accessMode: ReadWriteOnce
  # 存储大小：持久卷声明的空间大小
  size: 1Gi
  # 存储类名称：使用哪种存储提供方式
  storageClass: "local"

# 环境变量配置（可选）：定义容器的环境变量
env:
  # 第一个环境变量
  env1:
    # 环境变量名称
    name: APP_MODE
    # 环境变量值
    value: "production"
  # 第二个环境变量
  env2:
    name: DEBUG
    value: "false"