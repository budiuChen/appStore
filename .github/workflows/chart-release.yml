name: Release Charts

on:
  workflow_run:
    workflows: ["Chart Format Check"]
    types:
      - completed
    branches:
      - '**'
  # 添加手动触发选项
  workflow_dispatch:
    inputs:
      branch:
        description: '要处理的分支名称(不包含refs/heads/前缀)'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  release:
    # 移除分支检查条件，允许所有分支运行
    if: >
      ${{ 
        (github.event_name == 'workflow_dispatch') || 
        (
          github.event_name == 'workflow_run' && 
          github.event.workflow_run.conclusion == 'success'
        ) 
      }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get branch name
        id: branch-name
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.branch }}" != "" ]]; then
            echo "BRANCH_NAME=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
            echo "手动触发模式，处理分支: ${{ github.event.inputs.branch }}"
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "BRANCH_NAME=${{ github.event.workflow_run.head_branch }}" >> $GITHUB_ENV
            echo "工作流触发模式，处理分支: ${{ github.event.workflow_run.head_branch }}"
            
            # 提取用户名前缀
            USER_PREFIX=$(echo "${{ github.event.workflow_run.head_branch }}" | cut -d'/' -f1)
            echo "BRANCH_OWNER=$USER_PREFIX" >> $GITHUB_ENV
            echo "分支所有者: $USER_PREFIX"
          else
            echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
            echo "自动触发模式，处理分支: ${GITHUB_REF#refs/heads/}"
            
            # 提取用户名前缀
            USER_PREFIX=$(echo ${GITHUB_REF#refs/heads/} | cut -d'/' -f1)
            echo "BRANCH_OWNER=$USER_PREFIX" >> $GITHUB_ENV
            echo "分支所有者: $USER_PREFIX"
          fi

      - name: Debug info
        run: |
          echo "当前事件: ${{ github.event_name }}"
          echo "当前分支: ${{ github.ref }}"
          echo "处理分支: ${{ env.BRANCH_NAME }}"
          echo "分支所有者: ${{ env.BRANCH_OWNER }}"
          echo "工作目录: $(pwd)"
          echo "仓库结构:"
          ls -la

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Debug Directory Structure
        run: |
          echo "查看仓库目录结构"
          find charts -type d | sort
          echo "----------------------------"
          ls -la charts/stable/

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0

      - name: Package Charts
        run: |
          mkdir -p .release
          # 使用递归查找所有的Chart
          find charts/stable -name Chart.yaml | while read chart_yaml; do
            chart_dir=$(dirname "$chart_yaml")
            echo "找到Chart: $chart_dir"
            helm package "$chart_dir" -d .release || echo "打包 $chart_dir 失败"
          done
          
          # 显示打包结果
          echo "打包完成的Charts:"
          ls -la .release/

      - name: Create index.yaml
        run: |
          cd .release
          helm repo index .
          echo "index.yaml内容:"
          cat index.yaml
          
      - name: Generate Category JSON
        run: |
          echo "生成应用分类JSON..."
          CHARTS_DIR="./charts/stable"
          CATEGORY_FILE="category.json"
          
          # 创建JSON结构
          echo "{" > $CATEGORY_FILE
          echo "  \"categories\": {" >> $CATEGORY_FILE
          
          # 临时目录用于分类处理
          TEMP_DIR=$(mktemp -d)
          CATEGORIES_FILE="$TEMP_DIR/categories.txt"
          touch $CATEGORIES_FILE
          
          # 查找所有Chart.yaml文件并提取分类信息
          find $CHARTS_DIR -name Chart.yaml | while read chart_file; do
            # 获取应用名(目录名)
            app_dir=$(dirname "$chart_file")
            app_name=$(basename "$app_dir")
            
            # 提取应用描述
            app_desc=$(grep "^description:" "$chart_file" | sed 's/description: *"\(.*\)"/\1/')
            if [ -z "$app_desc" ]; then
              app_desc=$(grep "^description:" "$chart_file" | sed 's/description: *\(.*\)/\1/')
            fi
            
            # 提取版本
            app_version=$(grep "^version:" "$chart_file" | sed 's/version: *\(.*\)/\1/')
            
            # 提取图标
            app_icon=$(grep "^icon:" "$chart_file" | sed 's/icon: *\(.*\)/\1/')
            
            # 提取分类，只使用budiu/app-category-zh
            category=""
            while IFS= read -r line; do
              if [[ "$line" == *"budiu/app-category-zh"* ]]; then
                category=$(echo "$line" | sed 's/.*budiu\/app-category-zh: *"\(.*\)".*/\1/')
                break
              fi
            done < "$chart_file"
            
            # 如果没有分类，设为"其他"
            if [ -z "$category" ]; then
              category="其他"
            fi
            
            # 记录分类
            if ! grep -q "^$category$" $CATEGORIES_FILE; then
              echo "$category" >> $CATEGORIES_FILE
              mkdir -p "$TEMP_DIR/$category"
            fi
            
            # 将应用信息写入临时文件
            echo "{" > "$TEMP_DIR/$category/$app_name.json"
            echo "  \"name\": \"$app_name\"," >> "$TEMP_DIR/$category/$app_name.json"
            echo "  \"description\": \"$app_desc\"," >> "$TEMP_DIR/$category/$app_name.json" 
            echo "  \"version\": \"$app_version\"," >> "$TEMP_DIR/$category/$app_name.json"
            echo "  \"icon\": \"$app_icon\"," >> "$TEMP_DIR/$category/$app_name.json"
            echo "  \"path\": \"./stable/$app_name\"" >> "$TEMP_DIR/$category/$app_name.json"
            echo "}" >> "$TEMP_DIR/$category/$app_name.json"
          done
          
          # 处理所有分类添加到JSON
          first_category=true
          sort $CATEGORIES_FILE | while read category; do
            if [ "$first_category" = true ]; then
              first_category=false
            else
              echo "," >> $CATEGORY_FILE
            fi
            
            # 添加分类名
            echo "    \"$category\": [" >> $CATEGORY_FILE
            
            # 添加应用列表
            first_app=true
            for app_file in "$TEMP_DIR/$category"/*.json; do
              if [ "$first_app" = true ]; then
                first_app=false
              else
                echo "," >> $CATEGORY_FILE
              fi
              
              cat "$app_file" >> $CATEGORY_FILE
            done
            
            echo "" >> $CATEGORY_FILE
            echo "    ]" >> $CATEGORY_FILE
          done
          
          # 关闭JSON结构
          echo "  }" >> $CATEGORY_FILE
          echo "}" >> $CATEGORY_FILE
          
          # 格式化JSON（如果jq可用）
          if command -v jq &> /dev/null; then
            jq . $CATEGORY_FILE > $CATEGORY_FILE.tmp && mv $CATEGORY_FILE.tmp $CATEGORY_FILE
          fi
          
          # 清理临时文件
          rm -rf $TEMP_DIR
          
          echo "应用分类JSON生成完毕"
          echo "分类文件内容预览:"
          head -n 30 $CATEGORY_FILE

      - name: Deploy to user's Helm Charts branch
        run: |
          # 创建或切换到用户专属的helm分支
          TARGET_BRANCH="helm-${{ env.BRANCH_NAME }}"
          echo "目标分支: $TARGET_BRANCH"
          
          # 尝试切换到目标分支，如果不存在则创建
          git fetch origin $TARGET_BRANCH || true
          if git show-ref --verify --quiet refs/remotes/origin/$TARGET_BRANCH; then
            echo "分支 $TARGET_BRANCH 已存在，切换到该分支"
            git checkout $TARGET_BRANCH
            git pull origin $TARGET_BRANCH
            git rm -rf *.tgz index.yaml category.json || true
          else
            echo "创建新分支 $TARGET_BRANCH"
            git checkout --orphan $TARGET_BRANCH
            git rm -rf .
          fi
          
          # 复制打包好的文件和分类文件
          cp -r .release/* .
          cp category.json .
          
          # 创建README文件记录所有权信息
          echo "# Helm Repository for ${{ env.BRANCH_NAME }}" > README.md
          echo "Generated from branch: ${{ env.BRANCH_NAME }}" >> README.md
          echo "Owner: ${{ env.BRANCH_OWNER }}" >> README.md
          echo "Last updated: $(date)" >> README.md
          echo "" >> README.md
          echo "## Usage" >> README.md
          echo '```bash' >> README.md
          echo "# Add this Helm repository" >> README.md
          echo "helm repo add ${{ env.BRANCH_OWNER }}-repo https://raw.githubusercontent.com/${{ github.repository }}/$TARGET_BRANCH/" >> README.md
          echo "# Update repositories" >> README.md
          echo "helm repo update" >> README.md
          echo "# List available charts" >> README.md
          echo "helm search repo ${{ env.BRANCH_OWNER }}-repo" >> README.md
          echo '```' >> README.md
          echo "" >> README.md
          echo "## Available Categories" >> README.md
          echo "See [category.json](./category.json) for a categorized list of available applications." >> README.md
          
          # 提交并推送
          git add *.tgz index.yaml category.json README.md
          git commit -m "Update Helm charts and category JSON for user branch ${{ env.BRANCH_NAME }}"
          
          # 使用PAT令牌进行推送
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push -f origin $TARGET_BRANCH
          
          echo "Charts已发布到分支: $TARGET_BRANCH"
          echo "用户可使用以下URL添加应用仓库:"
          echo "https://raw.githubusercontent.com/${{ github.repository }}/$TARGET_BRANCH/"
          
          # 验证文件是否存在
          echo "尝试验证文件可访问性:"
          curl -s -o /dev/null -w "index.yaml: %{http_code}\n" https://raw.githubusercontent.com/${{ github.repository }}/$TARGET_BRANCH/index.yaml
          curl -s -o /dev/null -w "category.json: %{http_code}\n" https://raw.githubusercontent.com/${{ github.repository }}/$TARGET_BRANCH/category.json 